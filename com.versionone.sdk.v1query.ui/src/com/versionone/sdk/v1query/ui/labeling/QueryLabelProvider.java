/*
* generated by Xtext
*/
package com.versionone.sdk.v1query.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;
import com.versionone.sdk.v1query.query.AndRightTerm;
import com.versionone.sdk.v1query.query.AssetPath;
import com.versionone.sdk.v1query.query.AttributeFilterTerm;
import com.versionone.sdk.v1query.query.FilterExpression;
import com.versionone.sdk.v1query.query.GroupTerm;
import com.versionone.sdk.v1query.query.OrRightTerm;
import com.versionone.sdk.v1query.query.Query;
import com.versionone.sdk.v1query.query.QueryParameter;
import com.versionone.sdk.v1query.query.ResourcePath;
import com.versionone.sdk.v1query.query.With;
import com.versionone.sdk.v1query.query.WithTerm;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class QueryLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public QueryLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}
	
	String text(ResourcePath path) {
		return path.getHost() + "/" + path.getInstance() + "/" + path.getQuerytype();
	}
	
	String text(AssetPath asset) {
		return asset.getAssettype() + ":" + asset.getId() + ((asset.getMoment()==0) ? "" : (":" + asset.getMoment()));
	}
	
	String text(Query query) {
		return "?";
	}
	
	String text(QueryParameter param) {
		return param.eClass().getName();
	}
	
	String text(With with) {
		return with.getTerms().get(0).toString() + ((with.getTerms().size()>1) ? "" : "...");
	}
	
	String text(WithTerm term) {
		return term.getVar();
	}

	String text(GroupTerm g) {
		return "()";
	}
	
	String text(FilterExpression f) {
		return "Where";
	}
	
	String text(AttributeFilterTerm term) {
		return (("-".equals(term.getExists())) ? "-" : "") + term.getAttr().getAttrSelector().getTerms().get(0).getAttrname();
	}

	String text(AndRightTerm rt) {
		return "And";
	}
	
	String text(OrRightTerm rt) {
		return "Or";
	}
	

/*
	//Labels and icons can be computed like this:
	
	String text(MyModel ele) {
	  return "my "+ele.getName();
	}
	 
    String image(MyModel ele) {
      return "MyModel.gif";
    }
*/
}
